{
  "version": 3,
  "sources": ["../../../in-memory-web-api/src/in-memory-backend.service.ts"],
  "sourcesContent": ["import { Inject, Injector, Optional } from '@angular/core';\nimport { BaseResponseOptions, BrowserXhr, Connection, ConnectionBackend,\n         Headers, ReadyState, Request, RequestMethod,\n         Response, ResponseOptions, URLSearchParams,\n         XHRBackend, XSRFStrategy } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer }   from 'rxjs/Observer';\nimport 'rxjs/add/operator/delay';\n\nimport { STATUS, STATUS_CODE_INFO } from './http-status-codes';\n\n/**\n* Interface for a class that creates an in-memory database\n*\n* Its `createDb` method creates a hash of named collections that represents the database\n*\n* For maximum flexibility, the service may define HTTP method overrides.\n* Such methods must match the spelling of an HTTP method in lower case (e.g, \"get\").\n* If a request has a matching method, it will be called as in\n* `get(info: requestInfo, db: {})` where `db` is the database object described above.\n*/\nexport abstract class InMemoryDbService {\n  /**\n  * Creates a \"database\" hash whose keys are collection names\n  * and whose values are arrays of collection objects to return or update.\n  *\n  * This method must be safe to call repeatedly.\n  * Each time it should return a new object with new arrays containing new item objects.\n  * This condition allows InMemoryBackendService to morph the arrays and objects\n  * without touching the original source data.\n  */\n  abstract createDb(): {};\n}\n\n/**\n* Interface for InMemoryBackend configuration options\n*/\nexport interface InMemoryBackendConfigArgs {\n  /**\n   * false (default) if search match should be case insensitive\n   */\n  caseSensitiveSearch?: boolean;\n  /**\n   * default response options\n   */\n  defaultResponseOptions?: ResponseOptions;\n  /**\n   * delay (in ms) to simulate latency\n   */\n  delay?: number;\n  /**\n   * false (default) if ok when object-to-delete not found; else 404\n   */\n  delete404?: boolean;\n  /**\n   * false (default) if should pass unrecognized request URL through to original backend; else 404\n   */\n  passThruUnknownUrl?: boolean;\n  /**\n   * host for this service\n   */\n  host?: string;\n  /**\n   * root path before any API call\n   */\n  rootPath?: string;\n}\n\n/**\n*  InMemoryBackendService configuration options\n*  Usage:\n*    InMemoryWebApiModule.forRoot(InMemHeroService, {delay: 600})\n*\n*  or if providing separately:\n*    provide(InMemoryBackendConfig, {useValue: {delay: 600}}),\n*/\nexport class InMemoryBackendConfig implements InMemoryBackendConfigArgs {\n  constructor(config: InMemoryBackendConfigArgs = {}) {\n    Object.assign(this, {\n      // default config:\n      caseSensitiveSearch: false,\n      defaultResponseOptions: new BaseResponseOptions(),\n      delay: 500,\n      delete404: false,\n      passThruUnknownUrl: false,\n      host: '',\n      rootPath: ''\n    }, config);\n  }\n}\n\n/**\n* Interface for object w/ info about the current request url\n* extracted from an Http Request\n*/\nexport interface RequestInfo {\n  req: Request;\n  base: string;\n  collection: any[];\n  collectionName: string;\n  headers: Headers;\n  id: any;\n  query: URLSearchParams;\n  resourceUrl: string;\n}\n\n/**\n* Interface for object passed to an HTTP method override method\n*/\nexport interface HttpMethodInterceptorArgs {\n  requestInfo: RequestInfo;           // parsed request\n  db: Object;                         // the current in-mem database collections\n  config: InMemoryBackendConfigArgs;  // the current config\n  passThruBackend: ConnectionBackend; // pass through backend, if it exists\n}\n\nexport const isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n\n/**\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected InMemoryDataService service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n *\n * ### Usage\n *\n * Create `InMemoryDataService` class that implements `InMemoryDataService`.\n * Call `forRoot` static method with this service class and optional configuration object:\n * ```\n * // other imports\n * import { HttpModule }           from '@angular/http';\n * import { InMemoryWebApiModule } from 'angular-in-memory-web-api';\n *\n * import { InMemHeroService, inMemConfig } from '../api/in-memory-hero.service';\n * @NgModule({\n *  imports: [\n *    HttpModule,\n *    InMemoryWebApiModule.forRoot(InMemHeroService, inMemConfig),\n *    ...\n *  ],\n *  ...\n * })\n * export class AppModule { ... }\n * ```\n */\n\nexport class InMemoryBackendService {\n  protected passThruBackend: ConnectionBackend;\n  protected config: InMemoryBackendConfigArgs = new InMemoryBackendConfig();\n  protected db: Object;\n\n  constructor(\n    private injector: Injector,\n    private inMemDbService: InMemoryDbService,\n    @Inject(InMemoryBackendConfig) @Optional() config: InMemoryBackendConfigArgs\n    ) {\n    this.resetDb();\n\n    const loc = this.getLocation('./');\n    this.config.host = loc.host;\n    this.config.rootPath = loc.pathname;\n    Object.assign(this.config, config || {});\n\n    this.setPassThruBackend();\n  }\n\n\n  createConnection(req: Request): Connection {\n    const response = this.handleRequest(req);\n    return {\n      readyState: ReadyState.Done,\n      request: req,\n      response\n    };\n  }\n\n  ////  protected /////\n\n  /**\n   * Process Request and return an Observable of Http Response object\n   * in the manner of a RESTy web api.\n   *\n   * Expect URI pattern in the form :base/:collectionName/:id?\n   * Examples:\n   *   // for store with a 'characters' collection\n   *   GET api/characters          // all characters\n   *   GET api/characters/42       // the character with id=42\n   *   GET api/characters?name=^j  // 'j' is a regex; returns characters whose name starts with 'j' or 'J'\n   *   GET api/characters.json/42  // ignores the \".json\"\n   *\n   * Also accepts\n   *   \"commands\":\n   *     POST \"resetDb\",\n   *     GET/POST \"config\"\" - get or (re)set the config\n   *\n   *   HTTP overrides:\n   *     If the injected inMemDbService defines an HTTP method (lowercase)\n   *     The request is forwarded to that method as in\n   *     `inMemDbService.get(httpMethodInterceptorArgs)`\n   *     which must return an `Observable<Response>`\n   */\n  protected handleRequest(req: Request): Observable<Response> {\n    const {base, collectionName, id, resourceUrl, query} = this.parseUrl(req.url);\n    const collection = this.db[collectionName];\n    const reqInfo: RequestInfo = {\n      req: req,\n      base: base,\n      collection: collection,\n      collectionName: collectionName,\n      headers: new Headers({ 'Content-Type': 'application/json' }),\n      id: this.parseId(collection, id),\n      query: query,\n      resourceUrl: resourceUrl\n    };\n\n    const reqMethodName = RequestMethod[req.method || 0].toLowerCase();\n    let resOptions: ResponseOptions;\n\n    try {\n      if ('commands' === reqInfo.base.toLowerCase()) {\n        return this.commands(reqInfo);\n\n      } else if (this.inMemDbService[reqMethodName]) {\n        // If service has an interceptor for an HTTP method, call it\n        const interceptorArgs: HttpMethodInterceptorArgs = {\n          requestInfo: reqInfo,\n          db: this.db,\n          config: this.config,\n          passThruBackend: this.passThruBackend\n        };\n        // The result which must be Observable<Response>\n        return this.inMemDbService[reqMethodName](interceptorArgs);\n\n      } else if (reqInfo.collection) {\n        return this.collectionHandler(reqInfo);\n\n      } else if (this.passThruBackend) {\n        // Passes request thru to a \"real\" backend which returns an Observable<Response>\n        // BAIL OUT with this Observable<Response>\n        return this.passThruBackend.createConnection(req).response;\n\n      } else {\n        resOptions = this.createErrorResponse(STATUS.NOT_FOUND, `Collection '${collectionName}' not found`);\n        return this.createObservableResponse(resOptions);\n      }\n\n    } catch (error) {\n      const err = error.message || error;\n      resOptions = this.createErrorResponse(STATUS.INTERNAL_SERVER_ERROR, `${err}`);\n      return this.createObservableResponse(resOptions);\n    }\n\n  }\n\n  /**\n   * Apply query/search parameters as a filter over the collection\n   * This impl only supports RegExp queries on string properties of the collection\n   * ANDs the conditions together\n   */\n  protected applyQuery(collection: any[], query: URLSearchParams) {\n    // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\n    const conditions: {name: string, rx: RegExp}[] = [];\n    const caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\n    query.paramsMap.forEach((value: string[], name: string) => {\n      value.forEach(v => conditions.push({name, rx: new RegExp(decodeURI(v), caseSensitive)}));\n    });\n\n    const len = conditions.length;\n    if (!len) { return collection; }\n\n    // AND the RegExp conditions\n    return collection.filter(row => {\n      let ok = true;\n      let i = len;\n      while (ok && i) {\n        i -= 1;\n        const cond = conditions[i];\n        ok = cond.rx.test(row[cond.name]);\n      }\n      return ok;\n    });\n  }\n\n  protected clone(data: any) {\n    return JSON.parse(JSON.stringify(data));\n  }\n\n  protected collectionHandler(reqInfo: RequestInfo): Observable<Response> {\n    const req = reqInfo.req;\n    let resOptions: ResponseOptions;\n\n    switch (req.method) {\n      case RequestMethod.Get:\n        resOptions = this.get(reqInfo);\n        break;\n      case RequestMethod.Post:\n        resOptions = this.post(reqInfo);\n        break;\n      case RequestMethod.Put:\n        resOptions = this.put(reqInfo);\n        break;\n      case RequestMethod.Delete:\n        resOptions = this.delete(reqInfo);\n        break;\n      default:\n        resOptions = this.createErrorResponse(STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\n        break;\n    }\n    return this.createObservableResponse(resOptions);\n  }\n\n  /**\n   * When the `base`=\"commands\", the `collectionName` is the command\n   * Example URLs:\n   *   commands/resetdb   // Reset the \"database\" to its original state\n   *   commands/config (GET) // Return this service's config object\n   *   commands/config (!GET) // Update the config (e.g. delay)\n   *\n   * Usage:\n   *   http.post('commands/resetdb', null);\n   *   http.get('commands/config');\n   *   http.post('commands/config', '{\"delay\":1000}');\n   */\n  protected commands(reqInfo: RequestInfo): Observable<Response> {\n    const command = reqInfo.collectionName.toLowerCase();\n    const method  = reqInfo.req.method;\n    let resOptions: ResponseOptions;\n\n    switch (command) {\n      case 'resetdb':\n        this.resetDb();\n        resOptions = new ResponseOptions({ status: STATUS.OK });\n        break;\n      case 'config':\n        if (method === RequestMethod.Get) {\n          resOptions = new ResponseOptions({\n            body: this.clone(this.config),\n            status: STATUS.OK\n          });\n        } else {\n          // Be nice ... any other method is a config update\n          const body = JSON.parse(<string>reqInfo.req.text() || '{}');\n          Object.assign(this.config, body);\n          this.setPassThruBackend();\n          resOptions = new ResponseOptions({ status: STATUS.NO_CONTENT });\n        }\n        break;\n      default:\n        resOptions = this.createErrorResponse(\n          STATUS.INTERNAL_SERVER_ERROR, `Unknown command \"${command}\"`);\n    }\n    return this.createObservableResponse(resOptions);\n  }\n\n  protected createErrorResponse(status: number, message: string)  {\n    return new ResponseOptions({\n      body: { 'error': `${message}` },\n      headers: new Headers({ 'Content-Type': 'application/json' }),\n      status: status\n    });\n  }\n\n  protected createObservableResponse(resOptions: ResponseOptions): Observable<Response> {\n      resOptions = this.setStatusText(resOptions);\n      if (this.config.defaultResponseOptions) {\n        resOptions = this.config.defaultResponseOptions.merge(resOptions);\n      }\n\n      const res = new Response(resOptions);\n\n      return new Observable<Response>((responseObserver: Observer<Response>) => {\n        if (isSuccess(res.status)) {\n          responseObserver.next(res);\n          responseObserver.complete();\n        } else {\n          responseObserver.error(res);\n        }\n        return () => { }; // unsubscribe function\n      })\n      .delay(this.config.delay || 500);\n  }\n\n  protected delete({id, collection, collectionName, headers /*, req */}: RequestInfo) {\n    if (!id) {\n      return this.createErrorResponse(STATUS.NOT_FOUND, `Missing \"${collectionName}\" id`);\n    }\n    const exists = this.removeById(collection, id);\n    return new ResponseOptions({\n      headers: headers,\n      status: (exists || !this.config.delete404) ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\n    });\n  }\n\n  protected findById(collection: any[], id: number | string) {\n    return collection.find((item: any) => item.id === id);\n  }\n\n  protected genId(collection: any): any {\n    // assumes numeric ids\n    let maxId = 0;\n    collection.reduce((prev: any, item: any) => {\n      maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\n    }, null);\n    return maxId + 1;\n  }\n\n  protected get({id, query, collection, collectionName, headers}: RequestInfo) {\n    let data = collection;\n\n    if (id) {\n      data = this.findById(collection, id);\n    } else if (query) {\n      data = this.applyQuery(collection, query);\n    }\n\n    if (!data) {\n      return this.createErrorResponse(STATUS.NOT_FOUND,\n        `'${collectionName}' with id='${id}' not found`);\n    }\n    return new ResponseOptions({\n      body: { data: this.clone(data) },\n      headers: headers,\n      status: STATUS.OK\n    });\n  }\n\n  protected getLocation(href: string) {\n    const l = document.createElement('a');\n    l.href = href;\n    return l;\n  };\n\n  protected indexOf(collection: any[], id: number) {\n    return collection.findIndex((item: any) => item.id === id);\n  }\n\n  // tries to parse id as number if collection item.id is a number.\n  // returns the original param id otherwise.\n  protected parseId(collection: {id: any}[], id: string): any {\n    if (!id) { return null; }\n    const isNumberId =  collection[0] && typeof collection[0].id === 'number';\n    if (isNumberId) {\n      const idNum = parseFloat(id);\n      return isNaN(idNum) ? id : idNum;\n    }\n    return id;\n  }\n\n  protected parseUrl(url: string) {\n    try {\n      const loc = this.getLocation(url);\n      let drop = this.config.rootPath.length;\n      let urlRoot = '';\n      if (loc.host !== this.config.host) {\n        // url for a server on a different host!\n        // assume it's collection is actually here too.\n        drop = 1; // the leading slash\n        urlRoot = loc.protocol + '//' + loc.host + '/';\n      }\n      const path = loc.pathname.substring(drop);\n      let [base, collectionName, id] = path.split('/');\n      const resourceUrl = urlRoot + base + '/' + collectionName + '/';\n      [collectionName] = collectionName.split('.'); // ignore anything after the '.', e.g., '.json'\n      const query = loc.search && new URLSearchParams(loc.search.substr(1));\n      return { base, id, collectionName, resourceUrl, query };\n    } catch (err) {\n      const msg = `unable to parse url '${url}'; original error: ${err.message}`;\n      throw new Error(msg);\n    }\n  }\n\n  protected post({collection, /* collectionName, */ headers, id, req, resourceUrl}: RequestInfo) {\n    const item = JSON.parse(<string>req.text());\n    if (!item.id) {\n      item.id = id || this.genId(collection);\n    }\n    // ignore the request id, if any. Alternatively,\n    // could reject request if id differs from item.id\n    id = item.id;\n    const existingIx = this.indexOf(collection, id);\n    if (existingIx > -1) {\n      collection[existingIx] = item;\n      return new ResponseOptions({\n        headers: headers,\n        status: STATUS.NO_CONTENT\n      });\n    } else {\n      collection.push(item);\n      headers.set('Location', resourceUrl + '/' + id);\n      return new ResponseOptions({\n        headers: headers,\n        body: { data: this.clone(item) },\n        status: STATUS.CREATED\n      });\n    }\n  }\n\n  protected put({id, collection, collectionName, headers, req}: RequestInfo) {\n    const item = JSON.parse(<string>req.text());\n    if (!id) {\n      return this.createErrorResponse(STATUS.NOT_FOUND, `Missing '${collectionName}' id`);\n    }\n    if (id !== item.id) {\n      return this.createErrorResponse(STATUS.BAD_REQUEST,\n        `\"${collectionName}\" id does not match item.id`);\n    }\n    const existingIx = this.indexOf(collection, id);\n    if (existingIx > -1) {\n      collection[existingIx] = item;\n      return new ResponseOptions({\n        headers: headers,\n        status: STATUS.NO_CONTENT // successful; no content\n      });\n    } else {\n      collection.push(item);\n      return new ResponseOptions({\n        body: { data: this.clone(item) },\n        headers: headers,\n        status: STATUS.CREATED\n      });\n    }\n  }\n\n  protected removeById(collection: any[], id: number) {\n    const ix = this.indexOf(collection, id);\n    if (ix > -1) {\n      collection.splice(ix, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Reset the \"database\" to its original state\n   */\n  protected resetDb() {\n    this.db = this.inMemDbService.createDb();\n  }\n\n  protected setPassThruBackend() {\n    this.passThruBackend = undefined;\n    if (this.config.passThruUnknownUrl) {\n      try {\n        // copied from @angular/http/backends/xhr_backend\n        const browserXhr = this.injector.get(BrowserXhr);\n        const baseResponseOptions = this.injector.get(ResponseOptions);\n        const xsrfStrategy = this.injector.get(XSRFStrategy);\n        this.passThruBackend = new XHRBackend(browserXhr, baseResponseOptions, xsrfStrategy);\n      } catch (ex) {\n        ex.message = 'Cannot create passThru404 backend; ' + (ex.message || '');\n        throw ex;\n      }\n    }\n  }\n\n  protected setStatusText(options: ResponseOptions) {\n    try {\n      const statusCode = STATUS_CODE_INFO[options.status];\n      options['statusText'] = statusCode ? statusCode.text : 'Unknown Status';\n      return options;\n    } catch (err) {\n      return new ResponseOptions({\n        status: STATUS.INTERNAL_SERVER_ERROR,\n        statusText: 'Invalid Server Operation'\n      });\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
