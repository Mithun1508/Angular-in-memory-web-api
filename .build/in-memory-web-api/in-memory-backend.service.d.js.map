{
  "version": 3,
  "sources": ["../../in-memory-web-api/in-memory-backend.service.d.ts"],
  "sourcesContent": ["import { Injector } from '@angular/core';\r\nimport { Connection, ConnectionBackend, Headers, Request, Response, ResponseOptions, URLSearchParams } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/delay';\r\n/**\r\n* Interface for a class that creates an in-memory database\r\n*\r\n* Its `createDb` method creates a hash of named collections that represents the database\r\n*\r\n* For maximum flexibility, the service may define HTTP method overrides.\r\n* Such methods must match the spelling of an HTTP method in lower case (e.g, \"get\").\r\n* If a request has a matching method, it will be called as in\r\n* `get(info: requestInfo, db: {})` where `db` is the database object described above.\r\n*/\r\nexport declare abstract class InMemoryDbService {\r\n    /**\r\n    * Creates a \"database\" hash whose keys are collection names\r\n    * and whose values are arrays of collection objects to return or update.\r\n    *\r\n    * This method must be safe to call repeatedly.\r\n    * Each time it should return a new object with new arrays containing new item objects.\r\n    * This condition allows InMemoryBackendService to morph the arrays and objects\r\n    * without touching the original source data.\r\n    */\r\n    abstract createDb(): {};\r\n}\r\n/**\r\n* Interface for InMemoryBackend configuration options\r\n*/\r\nexport interface InMemoryBackendConfigArgs {\r\n    /**\r\n     * false (default) if search match should be case insensitive\r\n     */\r\n    caseSensitiveSearch?: boolean;\r\n    /**\r\n     * default response options\r\n     */\r\n    defaultResponseOptions?: ResponseOptions;\r\n    /**\r\n     * delay (in ms) to simulate latency\r\n     */\r\n    delay?: number;\r\n    /**\r\n     * false (default) if ok when object-to-delete not found; else 404\r\n     */\r\n    delete404?: boolean;\r\n    /**\r\n     * false (default) if should pass unrecognized request URL through to original backend; else 404\r\n     */\r\n    passThruUnknownUrl?: boolean;\r\n    /**\r\n     * host for this service\r\n     */\r\n    host?: string;\r\n    /**\r\n     * root path before any API call\r\n     */\r\n    rootPath?: string;\r\n}\r\n/**\r\n*  InMemoryBackendService configuration options\r\n*  Usage:\r\n*    InMemoryWebApiModule.forRoot(InMemHeroService, {delay: 600})\r\n*\r\n*  or if providing separately:\r\n*    provide(InMemoryBackendConfig, {useValue: {delay: 600}}),\r\n*/\r\nexport declare class InMemoryBackendConfig implements InMemoryBackendConfigArgs {\r\n    constructor(config?: InMemoryBackendConfigArgs);\r\n}\r\n/**\r\n* Interface for object w/ info about the current request url\r\n* extracted from an Http Request\r\n*/\r\nexport interface RequestInfo {\r\n    req: Request;\r\n    base: string;\r\n    collection: any[];\r\n    collectionName: string;\r\n    headers: Headers;\r\n    id: any;\r\n    query: URLSearchParams;\r\n    resourceUrl: string;\r\n}\r\n/**\r\n* Interface for object passed to an HTTP method override method\r\n*/\r\nexport interface HttpMethodInterceptorArgs {\r\n    requestInfo: RequestInfo;\r\n    db: Object;\r\n    config: InMemoryBackendConfigArgs;\r\n    passThruBackend: ConnectionBackend;\r\n}\r\nexport declare const isSuccess: (status: number) => boolean;\r\n/**\r\n * Simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected InMemoryDataService service.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n *\r\n * ### Usage\r\n *\r\n * Create `InMemoryDataService` class that implements `InMemoryDataService`.\r\n * Call `forRoot` static method with this service class and optional configuration object:\r\n * ```\r\n * // other imports\r\n * import { HttpModule }           from '@angular/http';\r\n * import { InMemoryWebApiModule } from 'angular-in-memory-web-api';\r\n *\r\n * import { InMemHeroService, inMemConfig } from '../api/in-memory-hero.service';\r\n * @NgModule({\r\n *  imports: [\r\n *    HttpModule,\r\n *    InMemoryWebApiModule.forRoot(InMemHeroService, inMemConfig),\r\n *    ...\r\n *  ],\r\n *  ...\r\n * })\r\n * export class AppModule { ... }\r\n * ```\r\n */\r\nexport declare class InMemoryBackendService {\r\n    private injector;\r\n    private inMemDbService;\r\n    protected passThruBackend: ConnectionBackend;\r\n    protected config: InMemoryBackendConfigArgs;\r\n    protected db: Object;\r\n    constructor(injector: Injector, inMemDbService: InMemoryDbService, config: InMemoryBackendConfigArgs);\r\n    createConnection(req: Request): Connection;\r\n    /**\r\n     * Process Request and return an Observable of Http Response object\r\n     * in the manner of a RESTy web api.\r\n     *\r\n     * Expect URI pattern in the form :base/:collectionName/:id?\r\n     * Examples:\r\n     *   // for store with a 'characters' collection\r\n     *   GET api/characters          // all characters\r\n     *   GET api/characters/42       // the character with id=42\r\n     *   GET api/characters?name=^j  // 'j' is a regex; returns characters whose name starts with 'j' or 'J'\r\n     *   GET api/characters.json/42  // ignores the \".json\"\r\n     *\r\n     * Also accepts\r\n     *   \"commands\":\r\n     *     POST \"resetDb\",\r\n     *     GET/POST \"config\"\" - get or (re)set the config\r\n     *\r\n     *   HTTP overrides:\r\n     *     If the injected inMemDbService defines an HTTP method (lowercase)\r\n     *     The request is forwarded to that method as in\r\n     *     `inMemDbService.get(httpMethodInterceptorArgs)`\r\n     *     which must return an `Observable<Response>`\r\n     */\r\n    protected handleRequest(req: Request): Observable<Response>;\r\n    /**\r\n     * Apply query/search parameters as a filter over the collection\r\n     * This impl only supports RegExp queries on string properties of the collection\r\n     * ANDs the conditions together\r\n     */\r\n    protected applyQuery(collection: any[], query: URLSearchParams): any[];\r\n    protected clone(data: any): any;\r\n    protected collectionHandler(reqInfo: RequestInfo): Observable<Response>;\r\n    /**\r\n     * When the `base`=\"commands\", the `collectionName` is the command\r\n     * Example URLs:\r\n     *   commands/resetdb   // Reset the \"database\" to its original state\r\n     *   commands/config (GET) // Return this service's config object\r\n     *   commands/config (!GET) // Update the config (e.g. delay)\r\n     *\r\n     * Usage:\r\n     *   http.post('commands/resetdb', null);\r\n     *   http.get('commands/config');\r\n     *   http.post('commands/config', '{\"delay\":1000}');\r\n     */\r\n    protected commands(reqInfo: RequestInfo): Observable<Response>;\r\n    protected createErrorResponse(status: number, message: string): ResponseOptions;\r\n    protected createObservableResponse(resOptions: ResponseOptions): Observable<Response>;\r\n    protected delete({id, collection, collectionName, headers}: RequestInfo): ResponseOptions;\r\n    protected findById(collection: any[], id: number | string): any;\r\n    protected genId(collection: any): any;\r\n    protected get({id, query, collection, collectionName, headers}: RequestInfo): ResponseOptions;\r\n    protected getLocation(href: string): HTMLAnchorElement;\r\n    protected indexOf(collection: any[], id: number): number;\r\n    protected parseId(collection: {\r\n        id: any;\r\n    }[], id: string): any;\r\n    protected parseUrl(url: string): {\r\n        base: string;\r\n        id: string;\r\n        collectionName: string;\r\n        resourceUrl: string;\r\n        query: URLSearchParams;\r\n    };\r\n    protected post({collection, headers, id, req, resourceUrl}: RequestInfo): ResponseOptions;\r\n    protected put({id, collection, collectionName, headers, req}: RequestInfo): ResponseOptions;\r\n    protected removeById(collection: any[], id: number): boolean;\r\n    /**\r\n     * Reset the \"database\" to its original state\r\n     */\r\n    protected resetDb(): void;\r\n    protected setPassThruBackend(): void;\r\n    protected setStatusText(options: ResponseOptions): ResponseOptions;\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;AAAA;AAAA;AAGA,mBAAO;",
  "names": []
}
